generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Artist {
    id              Int      @id @default(autoincrement())
    createdAt       DateTime @default(now())
    userId          String   @unique
    username        String   @unique
    profileImageUrl String
    pinnedTabId     Int      @default(-1)
    likesGiven      Like[]   @relation("likeGiver")
    likesReceived   Like[]   @relation("likeRecipient") // prob want better field name..
    tabs            Tab[]
}

model Tab {
    id                 Int       @id @default(autoincrement())
    title              String
    tuning             String
    bpm                Int       @default(75)
    chords             Json      @default("[]") // prisma doesn't seem to support direct default value of json
    strummingPatterns  Json      @default("[]") // prisma doesn't seem to support direct default value of json
    tabData            Json
    sectionProgression Json
    description        String    @default("")
    timeSignature      String    @default("")
    musicalKey         String    @default("")
    capo               Int       @default(0)
    hasRecordedAudio   Boolean   @default(false)
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @default(now()) @updatedAt
    artist             Artist?   @relation(fields: [createdById], references: [userId], onDelete: Cascade)
    createdById        String?
    likes              Like[]
    genre              Genre     @relation(fields: [genreId], references: [id])
    genreId            Int
    comments           Comment[]
}

model Like {
    id                Int    @id @default(autoincrement())
    tab               Tab    @relation(fields: [tabId], references: [id], onDelete: Cascade)
    tabId             Int
    tabArtist         Artist @relation("likeRecipient", fields: [tabArtistId], references: [userId], onDelete: Cascade)
    tabArtistId       String
    tabArtistUsername String // necessary to avoid extra query when only searching with username
    artistWhoLikes    Artist @relation("likeGiver", fields: [artistWhoLikedId], references: [userId], onDelete: Cascade)
    artistWhoLikedId  String
}

model Genre {
    id    Int    @id @default(autoincrement())
    name  String @unique
    color String
    tabs  Tab[]
}

model Comment {
    id        Int       @id @default(autoincrement())
    text      String
    createdAt DateTime  @default(now())
    authorId  String
    tab       Tab       @relation(fields: [tabId], references: [id])
    tabId     Int
    replyTo   Comment?  @relation("Replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replyToId Int?
    replies   Comment[] @relation("Replies")
}

// Singleton, will be updated directly by cron job
model WeeklyFeaturedArtist {
    id       Int    @id @default(autoincrement())
    artistId String
}
