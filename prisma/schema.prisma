generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres", "relationJoins"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Singleton, updated by cron job
model WeeklyFeaturedUser {
    id Int @id @default(autoincrement())

    userId String
}

// top 5 most popular tabs based on pageViews 
// (updated daily by a cron job)
model MostPopularTabs {
    id Int @id @default(autoincrement())

    tabId Int
    tab   Tab @relation(fields: [tabId], references: [id], onDelete: Cascade)
}

// top 5 most popular artists based on aggregate # of pageViews
// (updated daily by a cron job)
model MostPopularArtists {
    id Int @id @default(autoincrement())

    artistId Int
    artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Artist {
    id Int @id @default(autoincrement())

    name       String  @default("")
    isVerified Boolean @default(false)
    totalTabs  Int     @default(0)
    totalViews Int     @default(0)

    Tab                Tab[]
    mostPopularArtists MostPopularArtists[]
}

model TabRating {
    createdAt DateTime @default(now()) // might be used to detect spam

    value Int // (1-5) rating

    tab   Tab @relation(fields: [tabId], references: [id], onDelete: Cascade)
    tabId Int

    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
    userId String

    @@id([userId, tabId]) // composite key to prevent duplicate ratings
}

model Bookmark {
    createdAt DateTime @default(now())

    tab   Tab @relation(fields: [tabId], references: [id], onDelete: Cascade)
    tabId Int

    // user who created the tab (recipient of the bookmark)
    tabCreator       User?   @relation("tabCreator", fields: [tabCreatorUserId], references: [userId], onDelete: SetNull)
    tabCreatorUserId String?

    // user who is bookmarking
    bookmarkedBy       User   @relation("bookmarkedBy", fields: [bookmarkedByUserId], references: [userId], onDelete: Cascade)
    bookmarkedByUserId String

    @@id([bookmarkedByUserId, tabId]) // composite key to prevent duplicate ratings
}

model Tab {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    title              String
    tuning             String
    description        String?
    capo               Int     @default(0)
    bpm                Int     @default(75)
    difficulty         Int     @default(1) // 1-5
    key                String?
    chords             Json    @default("[]")
    strummingPatterns  Json    @default("[]")
    sectionProgression Json
    tabData            Json

    createdBy       User?   @relation(fields: [createdByUserId], references: [userId], onDelete: SetNull)
    createdByUserId String?

    genre   Genre @relation(fields: [genreId], references: [id])
    genreId Int

    bookmarks       Bookmark[]
    comments        Comment[]
    mostPopularTabs MostPopularTabs[]

    averageRating Float       @default(0)
    ratingsCount  Int         @default(0) // needed to calculate new average rating in optimistic fashion
    ratings       TabRating[]

    artist   Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
    artistId Int?

    // tsvector column for FTS:
    // Prisma doesn't manage this type directly, hence 'Unsupported'
    // The '?' makes it optional, easier to handle with triggers
    searchVector Unsupported("tsvector")?

    pageViews Int @default(0)

    @@index([searchVector], type: Gin) // Hint to Prisma about the index type, but the actual index is created via raw SQL migration
}

model Genre {
    id Int @id @default(autoincrement())

    name  String @unique
    color String

    tabs Tab[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    text     String
    authorId String

    tab   Tab @relation(fields: [tabId], references: [id])
    tabId Int

    replyTo   Comment?  @relation("Replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replyToId Int?
    replies   Comment[] @relation("Replies")
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    userId          String @unique // the id generated by Clerk upon sign up
    username        String @unique
    profileImageUrl String
    pinnedTabId     Int    @default(-1)

    // user stats
    totalTabs              Int   @default(0)
    totalTabViews          Int   @default(0)
    averageTabRating       Float @default(0)
    totalTabRatings        Int   @default(0)
    totalBookmarksReceived Int   @default(0)

    bookmarks         Bookmark[] @relation("bookmarkedBy")
    bookmarksReceived Bookmark[] @relation("tabCreator")

    tabs       Tab[]
    tabRatings TabRating[]
}
