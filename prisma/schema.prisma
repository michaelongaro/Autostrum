generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id             Int             @id @default(autoincrement())
    username       String          @unique
    profilePicture String?
    status         String?
    featuredTab    Tab?            @relation(fields: [featuredTabId], references: [id])
    featuredTabId  Int?
    createdTabs    Tab[]           @relation("CreatedBy")
    likes          Likes[]
    comments       Comment[]
    featuredArtist PromotedArtist?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt // not sure if this field will have any real value...

    @@index([featuredTabId])
}

model Tab {
    id                 Int           @id @default(autoincrement())
    title              String
    tuning             String
    bpm                Int?
    tabData            Json
    description        String?
    timeSignature      String?
    capo               Int?
    sectionProgression SongSection[]
    createdAt          DateTime      @default(now())
    createdBy          User          @relation("CreatedBy", fields: [createdById], references: [id], onUpdate: NoAction, onDelete: NoAction)
    createdById        Int
    genre              Genre         @relation(fields: [genreId], references: [id])
    genreId            Int
    comments           Comment[]
    likes              Likes[]
    User               User[]

    @@index([createdById])
    @@index([genreId])
}

// Junction table for likes
model Likes {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id])
    userId Int
    tab    Tab  @relation(fields: [tabId], references: [id])
    tabId  Int

    @@index([userId])
    @@index([tabId])
}

model SongSection {
    // gets uuid passed in from client since we need it before the tab is created
    id          String @id
    name        String
    repetitions Int
    index       Int
    tab         Tab    @relation(fields: [tabId], references: [id])
    tabId       Int

    @@index([tabId])
}

model Genre {
    id    Int    @id @default(autoincrement())
    name  String @unique
    color String
    tabs  Tab[]
}

model Comment {
    id        Int       @id @default(autoincrement())
    text      String
    createdAt DateTime  @default(now())
    author    User      @relation(fields: [authorId], references: [id])
    authorId  Int
    tab       Tab       @relation(fields: [tabId], references: [id])
    tabId     Int
    replyTo   Comment?  @relation("Replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replyToId Int?
    replies   Comment[] @relation("Replies")

    @@index([tabId])
    @@index([authorId])
    @@index([replyToId])
}

model PromotedArtist {
    id        Int      @id @default(autoincrement())
    artist    User     @relation(fields: [artistId], references: [id])
    artistId  Int      @unique
    startDate DateTime
    endDate   DateTime
}
